{
	"scopeName": "source.swift",
	"name": "Swift",
	"comment": "Swift language",
	"fileTypes": [
		"swift"
	],
	"patterns": [
		{
			"comment": "Block Comments",
			"begin": "/\\*",
			"end": "\\*/",
			"name": "comment.block.swift"
		},
		{
			"comment": "Line comments",
			"begin": "//",
			"end": "$",
			"name": "comment.line.swift"
		},
		{ "include": "#source" }
	],
	"repository": {
		
		"source": {
			"patterns": [
				{ "include": "#strings" },
				{ "include": "#keywords" },
				{ "include": "#punctuation" },
				{ "include": "#operators" }
			]
		},
		
		"keywords": {
			"patterns": [
				{
					"name": "keyword.declarations.swift",
					"match": "\\b(class|deinit|enum|extension|func|import|init|inout|internal|let|operator|private|protocol|public|static|struct|subscript|typealias|var)\\b"
				},
				{
					"name": "keyword.statements.swift",
					"match": "\\b(break|case|continue|default|defer|do|else|fallthrough|for|guard|if|in|repeat|return|switch|where|while)\\b"
				},
				{
					"name": "keyword.expressions.swift",
					"match": "\\b(as|catch|dynamicType|false|is|nil|rethrows|super|self|Self|throw|throws|true|try|__COLUMN__|__FILE__|__FUNCTION__|__LINE__)\\b"
				},
				{
					"include": "#operator-decl"
				},
				{
					"name": "meta.class.body.swift",
					"match": "[`](class|deinit|enum|extension|func|import|init|inout|internal|let|operator|private|protocol|public|static|struct|subscript|typealias|var|break|case|continue|default|defer|do|else|fallthrough|for|guard|if|in|repeat|return|switch|where|while|as|catch|dynamicType|false|is|nil|rethrows|super|self|Self|throw|throws|true|try|__COLUMN__|__FILE__|__FUNCTION__|__LINE__)[`]"
				}
			]
		},
		
		"operator-decl": {
			"patterns": [
				{
					"name": "keyword.contextual.swift",
					"match": "\\b(postfix|infix)\\s+operator\\b"
				},
				{
					"match": "\\{\\s*(precedence\\s+[0-9]{1,3}\\s+)?(associativity)\\s+(left|right|none)\\s+\\}",
					"captures": {
						"0": {
							"name": "keyword.contextual.swift"
						},
						"1": {
							"name": "keyword.contextual.swift"
						},
						"2": {
							"name": "keyword.contextual.swift"
						},
						"3": {
							"name": "keyword.contextual.swift"
						}
					}
				}
			]
		},
		
		"punctuation": {
			"patterns": [
				{
					"name": "keyword.operator.swift",
					"match": "\\.|,|:|;|=|@|#|&|->|`|\\?|!|\\(|\\)|\\{|\\}|\\[|\\]"
				},
				{
					"name": "keyword.operator.swift",
					"match": "\\b_\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.custom.swift",
					"match": "(/|=|-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\?Â­)+"
				}
			]
		},
		
		"strings": {
			"patterns": [
				{
					"name": "string.swift",
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.swift"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.swift"
						}
					},
					"patterns": [
						{ "include": "#string-escape" },
						{ "include": "#string-interpolated" }
					]
				}
			]
		},
		"string-escape": {
			"patterns": [
				{
					"name": "string.escape.swift",
					"match": "\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})"
				}
			]
		},
		"string-interpolated": {
			"patterns": [
				{
					"name": "string.interpolated.swift",
					"match": "\\\\\\(.*\\)"
				}
			]
		}
	}
}